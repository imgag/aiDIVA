## AIdiva -- Augmented Intelligence Disease Variant Analysis
# Configuration file specifiying all the parameters that are needed to run AIdiva in the different modes
# if you modify the key names make sure to also update them in the run_AIdiva.py script
---
Assembly-build: GRCh37


Analysis-Input:
    # if inheritance should be considered and family information is provided, make sure that the vcf file contains sample informations for all family members,
    # else sample will be treated as single patient with unknown inheritance
    vcf: input.vcf

    # path to the working directory
    work-dir: test_work_dir/

    # path to the reference assembly used during the expansion of the indels
    ref-path: databases/grch37/

    # trained scoring models used to predict the pathogenicity score
    # if no trained model is present you can use the train_model.py script to train a new custom model
    scoring-model-snps: rf_model_snp.pkl
    scoring-model-indels: rf_model_indel.pkl

    # bed file to distinguish between coding and non-coding variants
    coding-regions: coding_regions.bed

    prioritization-information:
        # file containing the HPO terms that are associated with the disease (one term per line)
        hpo-file: recessive_HPO.txt

        # family type, shows the structure of the given family inforamtion
        # possible values: [TRIO, FAMILY, SINGLE]
        family-type: TRIO

        # file with the family information
        family-file: family.txt

        # List of genes that should be excluded in the analysis, because they are normally false positives
        # a default list is given in the res/ folder (gene_exclusion_list.txt), the file can be empty
        # set to null if no genes should be excluded
        gene-exclusion: null

        # Identifier to get the score from the annotated file
        cadd-identifier: CADD_PHRED
        repeat-identifier: simpleRepeat
        duplication-identifier: segmentDuplication


Model-Features:
    # List containing the names of the allele frequency sources (populations) that are present in the data set (the MaxAF will be based on these)
    allele_frequency_list:
        - gnomAD_AFR_AF
        - gnomAD_ASJ_AF
        - gnomAD_EAS_AF
        - gnomAD_FIN_AF
        - gnomAD_NFE_AF
        - gnomAD_OTH_AF
        - gnomAD_SAS_AF
        - AA_AF
        - EA_AF
        - AFR_AF
        - AMR_AF
        - EAS_AF
        - EUR_AF
        - SAS_AF

    # List containing the names of the features used for the model training
    feature_list:
        - SIFT
        - PolyPhen
        - CADD_PHRED
        - REVEL
        - ABB_SCORE
        - MaxAF # MAX_AF if activated in the VEP annotation
        - segmentDuplication
        - custom_EIGEN_PHRED
        - fannsdb_CONDEL
        - custom_FATHMM_XF
        - custom_MutationAssessor
        - phastCons46mammal
        - phastCons46primate
        - phastCons46vertebrate
        - phyloP46mammal
        - phyloP46primate
        - phyloP46vertebrate

VEP-Annotation:
    # Flag indicating whether to annotate the input data with VEP or not, if False then AIdiva assumes that the data is already annotated
    perform-vep-annotation: True

    # VEP: path to the VEP executable
    vep: vep_data/ensembl-vep-release-98.3/vep

    # threads to use during the annotation
    num-threads: 4

    # Cache directory and plugin directory
    cache-path: vep_data/cache
    plugin-path: vep_data/plugins

    # CADD: paths to the CADD database files
    cadd-snps: CADD/whole_genome_SNVs.tsv.gz
    cadd-indel: CADD/InDels.tsv.gz

    # Condel: path to the Condel config
    #condel: /mnt/users/ahboced1/Tools/vep_data/plugins/config/Condel/config

    # REVEL: path to the REVEL database file
    revel: REVEL/revel_all_chromosomes.tsv.gz

    # dbNSFP
    #dbNSFP: /mnt/users/ahbranl1/data_vep/dbNSFP/dbNSFP_hg19_3.5.gz

    custom:
        # BED like files here the key of the dictionary is used as the name to present the feature in the annotated file
        bed-files:
            simpleRepeat:
                file: simpleRepeats.bedGraph.gz
                method: overlap
            segmentDuplication:
                file: segmentDuplication.bedGraph.gz
                method: overlap
            ABB_SCORE:
                file: abb_score.bedGraph.gz
                method: exact
            oe_lof:
                file: gnomAD_OE_sorted.bed.gz
                method: overlap
        # VCF files the key of the dictionary is used to identify the feature in the INFO column of hte VCF file
        vcf-files:
            EIGEN_PHRED:
                file: Eigen_phred_hg19_chrom1-22.vcf.gz
                method: exact
                prefix: custom
            CONDEL:
                file: fannsdb_onlyCONDEL.vcf.gz
                method: exact
                prefix: fannsdb
            FATHMM_XF:
                file: fathmm_XF_onlyCoding.vcf.gz
                method: exact
                prefix: custom
            MutationAssessor:
                file: MA_scores_rel3_hg19_full.vcf.gz
                method: exact
                prefix: custom
        # Bigwig files the key of the dictionary is used as the name to present the feature in the annotated file
        bigwig-files:
            phastCons46mammal:
                file: phastCons46mammal.bw
                method: exact
            phastCons46primate:
                file: phastCons46primate.bw
                method: exact
            phastCons46vertebrate:
                file: phastCons46vertebrate.bw
                method: exact
            phyloP46mammal:
                file: phyloP46mammal.bw
                method: exact
            phyloP46primate:
                file: phyloP46primate.bw
                method: exact
            phyloP46vertebrate:
                file: phyloP46vertebrate.bw
                method: exact


Additional-Annotation:
    # Flag indicating whether to use the additional annotation scripts or not, if False it is assumed that the needed annoation was performed beforehand
    perform-additional-annotation: True

    # ABB_score ([path to the file] or null)
    abb-score: null

    # Simple tandem repeats ([path to the file] or null)
    simple-repeats: null

    # Segment Duplication ([path to the file] or null)
    segment-duplication: null

    # additional annotations the key is used as feature name for the prediction
    additional-bigwig-files:
        phyloP46mammal: phyloP46mammal.bw
        phyloP46primate: phyloP46primate.bw
        phyloP46vertebrate: phyloP46vertebrate.bw
        phastCons46mammal: phastCons46mammal.bw
        phastCons46primate: phastCons46primate.bw
        phastCons46vertebrate: phastCons46vertebrate.bw


Analysis-Output:
    out-file: out.csv
    filtered-out-file: filtered_out.csv

# make sure that the full path for the following files is present otherwise the prioritization step will fail
Internal-Parameters:
    gene2hpo-mapping: gene2hpo.pkl
    hpo-graph: hpo_graph.pkl
    hpo2gene-association: hpo2gene.pkl
